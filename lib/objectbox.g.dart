// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/local/models/board_state.dart';
import 'data/local/models/game.dart';
import 'data/local/models/player_state.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5376661069704407421),
      name: 'Game',
      lastPropertyId: const IdUid(10, 2623725884273394636),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8933384301099839027),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2880026226560832453),
            name: 'time',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2544055168562387988),
            name: 'add',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3836837350238356084),
            name: 'lastPlayed',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5646228821341533188),
            name: 'started',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 916405754635247841),
            name: 'gameState',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6190235275420951126),
            name: 'whiteId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 1912932908330587775),
            relationTarget: 'PlayerState'),
        ModelProperty(
            id: const IdUid(8, 1602346353373518214),
            name: 'blackId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 2888310330993580914),
            relationTarget: 'PlayerState'),
        ModelProperty(
            id: const IdUid(9, 5048434345176574628),
            name: 'uid',
            type: 9,
            flags: 34848,
            indexId: const IdUid(4, 7204200851244413278)),
        ModelProperty(
            id: const IdUid(10, 2623725884273394636),
            name: 'boardStateId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 3437129481656225446),
            relationTarget: 'BoardState')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1414973728443771360),
      name: 'PlayerState',
      lastPropertyId: const IdUid(5, 1269242932168400007),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7645470363894516237),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 658593687533185472),
            name: 'timeLeft',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1269242932168400007),
            name: 'nick',
            type: 9,
            flags: 34848,
            indexId: const IdUid(6, 7113008722925850326))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 5138410932425218197),
      name: 'BoardState',
      lastPropertyId: const IdUid(6, 4049481241361662133),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2936046340598398236),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 359037032011443158),
            name: 'turn',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2072368755772582215),
            name: 'castleSides',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4124426998754540012),
            name: 'halfMove',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6527055024824799925),
            name: 'fullMove',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4049481241361662133),
            name: 'enPassant',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 5138410932425218197),
      lastIndexId: const IdUid(6, 7113008722925850326),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [7154897424652175557],
      retiredIndexUids: const [7496769307385231534],
      retiredPropertyUids: const [
        5392970803299894319,
        1548970870397139836,
        3883704058047103362,
        4866237985086350014
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Game: EntityDefinition<Game>(
        model: _entities[0],
        toOneRelations: (Game object) =>
            [object.white, object.black, object.boardState],
        toManyRelations: (Game object) => {},
        getId: (Game object) => object.id,
        setId: (Game object, int id) {
          object.id = id;
        },
        objectToFB: (Game object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.time);
          fbb.addInt64(2, object.add);
          fbb.addInt64(
              3,
              object.lastPlayed == null
                  ? null
                  : object.lastPlayed!.microsecondsSinceEpoch * 1000);
          fbb.addInt64(
              4,
              object.started == null
                  ? null
                  : object.started!.microsecondsSinceEpoch * 1000);
          fbb.addInt64(5, object.gameState);
          fbb.addInt64(6, object.white.targetId);
          fbb.addInt64(7, object.black.targetId);
          fbb.addOffset(8, uidOffset);
          fbb.addInt64(9, object.boardState.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastPlayedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final startedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = Game()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..time = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..add = const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..lastPlayed = lastPlayedValue == null
                ? null
                : DateTime.fromMicrosecondsSinceEpoch(
                    (lastPlayedValue / 1000).round())
            ..started = startedValue == null
                ? null
                : DateTime.fromMicrosecondsSinceEpoch(
                    (startedValue / 1000).round())
            ..gameState =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..uid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '');
          object.white.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.white.attach(store);
          object.black.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.black.attach(store);
          object.boardState.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.boardState.attach(store);
          return object;
        }),
    PlayerState: EntityDefinition<PlayerState>(
        model: _entities[1],
        toOneRelations: (PlayerState object) => [],
        toManyRelations: (PlayerState object) => {},
        getId: (PlayerState object) => object.id,
        setId: (PlayerState object, int id) {
          object.id = id;
        },
        objectToFB: (PlayerState object, fb.Builder fbb) {
          final nickOffset = fbb.writeString(object.nick);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(3, object.timeLeft);
          fbb.addOffset(4, nickOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PlayerState()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..timeLeft =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..nick = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '');

          return object;
        }),
    BoardState: EntityDefinition<BoardState>(
        model: _entities[2],
        toOneRelations: (BoardState object) => [],
        toManyRelations: (BoardState object) => {},
        getId: (BoardState object) => object.id,
        setId: (BoardState object, int id) {
          object.id = id;
        },
        objectToFB: (BoardState object, fb.Builder fbb) {
          final castleSidesOffset = fbb.writeString(object.castleSides);
          final enPassantOffset = object.enPassant == null
              ? null
              : fbb.writeString(object.enPassant!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.turn);
          fbb.addOffset(2, castleSidesOffset);
          fbb.addInt64(3, object.halfMove);
          fbb.addInt64(4, object.fullMove);
          fbb.addOffset(5, enPassantOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BoardState()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..turn = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..castleSides = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..halfMove =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..fullMove =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..enPassant = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Game] entity fields to define ObjectBox queries.
class Game_ {
  /// see [Game.id]
  static final id = QueryIntegerProperty<Game>(_entities[0].properties[0]);

  /// see [Game.time]
  static final time = QueryIntegerProperty<Game>(_entities[0].properties[1]);

  /// see [Game.add]
  static final add = QueryIntegerProperty<Game>(_entities[0].properties[2]);

  /// see [Game.lastPlayed]
  static final lastPlayed =
      QueryIntegerProperty<Game>(_entities[0].properties[3]);

  /// see [Game.started]
  static final started = QueryIntegerProperty<Game>(_entities[0].properties[4]);

  /// see [Game.gameState]
  static final gameState =
      QueryIntegerProperty<Game>(_entities[0].properties[5]);

  /// see [Game.white]
  static final white =
      QueryRelationToOne<Game, PlayerState>(_entities[0].properties[6]);

  /// see [Game.black]
  static final black =
      QueryRelationToOne<Game, PlayerState>(_entities[0].properties[7]);

  /// see [Game.uid]
  static final uid = QueryStringProperty<Game>(_entities[0].properties[8]);

  /// see [Game.boardState]
  static final boardState =
      QueryRelationToOne<Game, BoardState>(_entities[0].properties[9]);
}

/// [PlayerState] entity fields to define ObjectBox queries.
class PlayerState_ {
  /// see [PlayerState.id]
  static final id =
      QueryIntegerProperty<PlayerState>(_entities[1].properties[0]);

  /// see [PlayerState.timeLeft]
  static final timeLeft =
      QueryIntegerProperty<PlayerState>(_entities[1].properties[1]);

  /// see [PlayerState.nick]
  static final nick =
      QueryStringProperty<PlayerState>(_entities[1].properties[2]);
}

/// [BoardState] entity fields to define ObjectBox queries.
class BoardState_ {
  /// see [BoardState.id]
  static final id =
      QueryIntegerProperty<BoardState>(_entities[2].properties[0]);

  /// see [BoardState.turn]
  static final turn =
      QueryIntegerProperty<BoardState>(_entities[2].properties[1]);

  /// see [BoardState.castleSides]
  static final castleSides =
      QueryStringProperty<BoardState>(_entities[2].properties[2]);

  /// see [BoardState.halfMove]
  static final halfMove =
      QueryIntegerProperty<BoardState>(_entities[2].properties[3]);

  /// see [BoardState.fullMove]
  static final fullMove =
      QueryIntegerProperty<BoardState>(_entities[2].properties[4]);

  /// see [BoardState.enPassant]
  static final enPassant =
      QueryStringProperty<BoardState>(_entities[2].properties[5]);
}
